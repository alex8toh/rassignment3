y <- c("a",TRUE)
as.numeric(y);
x <- 1:20
m <- matrix(4,4)
clear()
m <- matrix(1:6, nrow=2, ncol =3)
x <- c(1,2,NA,10,3)
is.nan(x)
x <- data.frame(foo = 1:4, bar = c(T,F,F,T))
for (i in 1:10){ print(i)}
count <- 0
while(count <10)
{}
m <- matrix(1:6, nrow=2, ncol =3)
source add2
above <- function(x,n){
use <- x>n
x[use]
}
x <- 1:20
above(x,12)
pwd
pwd()
ls
find.packages("devtools")
find.package("devtools")
install.package("devtools")
install.packages("devtools")
find.package("devtools")
library(devtools)
find_rtools()
install.packages("swirl")
library("swirl")
rm(list=ls())
library("swirl")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z = c(1.1,9,3.14)
z <- c(1.1,9,3.14)
? c
z
zz <- c(z,3)
c(z,555,z)
z*2+100
sqrt(z-1)->my_sqrt
my_sqrt
z/my_sqrt -> my_div
my_div
c(1,2,3,4)+c(0,10)->cc
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
5+7
x<- 5+7
x
x-3->y
y
z = c(1.1,9,3.14)
z <- c(1.1,9,3.14)
? c
z
c(z,555,z)->z
c(z,555,z)
z*2+100
sqrt(z-1)->my_sqrt
my_sqrt
z/my_sqrt->my_div
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
m
0
swirl()
library("swirl")
rm(list=ls())
library("swirl")
swirl
swirl()
1:20
pi;10
pi: 10
15:1
?':'
seq(1,20)
seq(0,10,by=0.5)
seq(5,10,length-30)->my_seq
seq(5,10,length=30)->my_seq
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect = c(0.5,55,-10,6)
c(0.5,55,-10,6)<-num_vect
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char<-c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name<-c(my_char,"Alex")
my_name
paste(my_name,collapse=" ")
paste("Hello", "world!", sep=" ")
paste(1:3, c("X","Y","Z"),sep="")
paste(LETTER, 1:4, sep = "-")
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
mydata <- sample(c(y,z),100)
my_data <- sample(c(y,z), 100)
my_na <- my_data[is.na(my_data)]
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
my_data / 0
0/0
Inf - Inf
find_package("devtools")
install.package("devtools")
install.packages("devtools")
library(devtools)
find_rtool()
find_rtools()
clear
clear()
clr
library(swirl)
rm(list=ls())
swirl
swirl()
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)& x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
library(swirl)
swirl()
library(swirl)
swirl()
my_vector <- 1:20
my_vector
dim()
dim(my_vector)
length(my_vector)
dim(my_vector)<- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix2, my_matrix)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_data)
?colnames
colnames(my_data)<-cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10 <= 10
5 !- 7
5 != 7
! (5==7)
! 5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 || 6!=8 && 4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
install.packages("proto")
library(caret)
install.packages("scales")
library(caret)
install.packages("BradleyTerry2")
library(caret)
install.packaqes("car")
install.packages("car")
library(caret)
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
?qqplot()
summary(concrete)
qqplot( CompressiveStrength,Cement)
qqplot( CompressiveStrength,data=cement)
qqplot(CompressiveStrength, data=cement)
qplot(CompressiveStrength, data=cement)
qplot(CompressiveStrength, data=Cement)
qplot(CompressiveStrength, data=training)
qplot(CompressiveStrength, color=FlyAsh, data=training)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
cutCement<-cut(traning$cement)
cutCement<-cut(traning$Cement)
cutCement<-cut(training$Cement)
cutCement<-cut(training$Cement, g=3)
cutCement<-cut2(training$Cement, g=3)
table(cutCement)
qplot(CompressiveStrength, color=FlyAsh, data=training)
summary(training)
qplot(CompressiveStrength, Cement, color=FlyAsh, data = training)
qplot(Cement, CompressiveStrength, color=FlyAsh, data=training)
qplot(Cement, CompressiveStrength, color=BlastFurnaceSlag)
qplot(Cement, CompressiveStrength, color=BlastFurnaceSlag, data=training)
qplot(Cement, CompressiveStrength, color=water, data=training)
qplot(Cement, CompressiveStrength, color=Water, data=training)
qplot(Cement, CompressiveStrength, color=Superplasticizer, data=training)
?hist()
featurePlot(x=training[,c("Cement", "BlastFurnaceSlag", "FlyAsh", "Water")], y=CompressiveStrength)
featurePlot(x=training[,c("Cement", "BlastFurnaceSlag", "FlyAsh", "Water")], y=CompressiveStrength, plot="pairs")
featurePlot(x=training[,c("Cement", "BlastFurnaceSlag", "FlyAsh", "Water")], y=training$CompressiveStrength, plot="pairs")
source('D:/Courses/R Programming/Assignment/Assignment 2/ProgrammingAssignment2/cachematrix.R')
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
source('D:/Courses/R Programming/Assignment/Assignment 2/ProgrammingAssignment2/cachematrix.R')
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
source('D:/Courses/R Programming/Assignment/Assignment 2/ProgrammingAssignment2/cachematrix.R')
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
trace
debug cacheSolve(mat2)
debug cacheSolve()
cacheSolve(mat2)
traceback
source('D:/Courses/R Programming/Assignment/Assignment 2/ProgrammingAssignment2/cachematrix.R')
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
View(mat)
source('D:/Courses/R Programming/Assignment/Assignment 2/ProgrammingAssignment2/cachematrix.R')
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
browswer
recover
source('D:/Courses/R Programming/Assignment/Assignment 2/ProgrammingAssignment2/cachematrix.R')
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
source('D:/Courses/R Programming/Assignment/Assignment 2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mat2)
source('D:/Courses/R Programming/Assignment/Assignment 2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mat2)
source('D:/Courses/R Programming/Assignment/Assignment 2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mat2)
source('D:/Courses/R Programming/Assignment/Assignment 2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(mat2)
setwd("D:/Courses/R Programming/Assignment/Assignment 3")
setwd("D:/Courses/R Programming/Assignment/rassignment3")
source('D:/Courses/R Programming/Assignment/rassignment3/hist.r')
ncol(outcome)
nrow(outcome)
summary(outcome)
str(outcome)
unique(data[,8])
unique(outcome[,8])
unique(outcome[,7])
source('D:/Courses/R Programming/Assignment/rassignment3/best.R')
source('D:/Courses/R Programming/Assignment/rassignment3/best.R')
best('xx',x)
best('CA',x)
best("CA",x)
is.element("CA",states)
states <- unique(outcome[,8])
states <- unique(outcome[,7])
is.element("CA", state)
is.element("CA", states)
